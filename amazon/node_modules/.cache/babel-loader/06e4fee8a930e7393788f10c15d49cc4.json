{"ast":null,"code":"var _jsxFileName = \"D:\\\\Upgrading\\\\react\\\\Learning_React\\\\amazon\\\\src\\\\reducer.js\";\nimport FlipMove from 'react-flip-move';\nexport const initialState = {\n  basket: [],\n  user: null\n};\n\nconst TopArticles = ({\n  basket\n}) => /*#__PURE__*/React.createElement(FlipMove, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }\n}, basket.map(bas => /*#__PURE__*/React.createElement(Article, Object.assign({\n  key: bas.id\n}, bas, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }\n})))); // Selector\n\n\nexport const getBasketTotal = basket => basket === null || basket === void 0 ? void 0 : basket.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TO_BASKET\":\n      return { ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case 'EMPTY_BASKET':\n      return { ...state,\n        basket: []\n      };\n\n    case \"REMOVE_FROM_BASKET\":\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.id);\n      let newBasket = [...state.basket];\n\n      if (index >= 0) {\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(`Cant remove product (id: ${action.id}) as its not in basket!`);\n      }\n\n      return { ...state,\n        basket: newBasket\n      };\n\n    case \"SET_USER\":\n      return { ...state,\n        user: action.user\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/Upgrading/react/Learning_React/amazon/src/reducer.js"],"names":["FlipMove","initialState","basket","user","TopArticles","map","bas","id","getBasketTotal","reduce","amount","item","price","reducer","state","action","type","index","findIndex","basketItem","newBasket","splice","console","warn"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,iBAArB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,MAAM,EAAE,EADkB;AAE1BC,EAAAA,IAAI,EAAE;AAFoB,CAArB;;AAKP,MAAMC,WAAW,GAAE,CAAC;AAACF,EAAAA;AAAD,CAAD,kBACjB,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGA,MAAM,CAACG,GAAP,CAAWC,GAAG,iBACb,oBAAC,OAAD;AAAS,EAAA,GAAG,EAAEA,GAAG,CAACC;AAAlB,GAA0BD,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADD,CADH,CADF,C,CAOA;;;AACA,OAAO,MAAME,cAAc,GAAIN,MAAD,IAC5BA,MAD4B,aAC5BA,MAD4B,uBAC5BA,MAAM,CAAEO,MAAR,CAAe,CAACC,MAAD,EAASC,IAAT,KAAkBA,IAAI,CAACC,KAAL,GAAaF,MAA9C,EAAsD,CAAtD,CADK;;AAGP,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELZ,QAAAA,MAAM,EAAE,CAAC,GAAGY,KAAK,CAACZ,MAAV,EAAkBa,MAAM,CAACJ,IAAzB;AAFH,OAAP;;AAKF,SAAK,cAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELZ,QAAAA,MAAM,EAAE;AAFH,OAAP;;AAKF,SAAK,oBAAL;AACE,YAAMe,KAAK,GAAGH,KAAK,CAACZ,MAAN,CAAagB,SAAb,CACXC,UAAD,IAAgBA,UAAU,CAACZ,EAAX,KAAkBQ,MAAM,CAACR,EAD7B,CAAd;AAGA,UAAIa,SAAS,GAAG,CAAC,GAAGN,KAAK,CAACZ,MAAV,CAAhB;;AAEA,UAAIe,KAAK,IAAI,CAAb,EAAgB;AACdG,QAAAA,SAAS,CAACC,MAAV,CAAiBJ,KAAjB,EAAwB,CAAxB;AAED,OAHD,MAGO;AACLK,QAAAA,OAAO,CAACC,IAAR,CACG,4BAA2BR,MAAM,CAACR,EAAG,yBADxC;AAGD;;AAED,aAAO,EACL,GAAGO,KADE;AAELZ,QAAAA,MAAM,EAAEkB;AAFH,OAAP;;AAKF,SAAK,UAAL;AACE,aAAO,EACL,GAAGN,KADE;AAELX,QAAAA,IAAI,EAAEY,MAAM,CAACZ;AAFR,OAAP;;AAKF;AACE,aAAOW,KAAP;AAxCJ;AA0CD,CA3CD;;AA6CA,eAAeD,OAAf","sourcesContent":["import FlipMove from 'react-flip-move';\n\nexport const initialState = {\n  basket: [],\n  user: null\n};\n\nconst TopArticles =({basket}) =>(\n  <FlipMove>\n    {basket.map(bas =>(\n      <Article key={bas.id} {...bas} />\n    ))}\n  </FlipMove>\n)\n// Selector\nexport const getBasketTotal = (basket) => \n  basket?.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TO_BASKET\":\n      return {\n        ...state,\n        basket: [...state.basket, action.item],\n      };\n    \n    case 'EMPTY_BASKET':\n      return {\n        ...state,\n        basket: []\n      }\n\n    case \"REMOVE_FROM_BASKET\":\n      const index = state.basket.findIndex(\n        (basketItem) => basketItem.id === action.id\n      );\n      let newBasket = [...state.basket];\n\n      if (index >= 0) {\n        newBasket.splice(index, 1);\n\n      } else {\n        console.warn(\n          `Cant remove product (id: ${action.id}) as its not in basket!`\n        )\n      }\n\n      return {\n        ...state,\n        basket: newBasket\n      }\n    \n    case \"SET_USER\":\n      return {\n        ...state,\n        user: action.user\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}